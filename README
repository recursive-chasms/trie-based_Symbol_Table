PETER ERNEST CARLE
Independently-invented trie-based symbol table

/*
TL;DR: I came up with a trie data structure on my own without knowing that's what it was called. It came primarily from my high-level understanding of hash tables and parse tables. I created the structure and source code for these projects independently of any specific assignment; it was never taught in class. The structure itself has theoretically constant look-up time.

The extended backstory behind this is available in the comments in the older project titled ambig_input_PeterCarle.c. 

Also feel free to explore the wealth of git information I left behind. Since I use git from the command-line, I commit frequently. Anyone sufficiently curious should get a good sense of the way the project evolved.

The primary source files of interest are:
1. p_trie.c
2. test_p_trie.c 
3. ambig_input_PeterCarle.c (within ambig_input directory). 


I. p_trie.c: 

This tests the basic functionality of the symbol table within a traditional compiler context. I took the Lex and YACC files from a toy language I produced to meet a specification in the Language Processing class, and I replaced the professor's linear symtab code with this trie-based symbol table. To test:

1. run make
2. cd to TestFiles
3. ../comp < [test file] (to see translated C source code in stdout)
4. ../comp < [test file] > test.c && gcc test.c && ./a.out (to run the program)


II. test_p_trie.c: 

This file can be compiled on its own without the makefile. Include a list of symbols called weird_input.txt in the directory, and enter the term to be searched for on the command line. If the string is present, it'll print its type (10 for CHAR in this case) alongside the number of iterations the algorithm took. 

If it's not found, the type will be 0, and the number of iterations will be a little over 100, since the algorithm checks a reference list of that length in case of possible hash collisions. This list could probably be shortened considerably, since it exists only for the edge case of multiple strings of the same length that end on the same character (e.g., cat, bat, dat, etc.). Hopefully most source files would include more varied variables, anyway.

About weird_input.txt: It's a fragment of a very large dictionary file I downloaded. While it may not be particularly representative of a normal list of variables (since all the words start with "st"), it is good for comparing the efficiency of the trie code with the linear symtab.c (found in linear-test directory).


III. ambig_input_PeterCarle.c:

This is the oldest of the three source files. It grew out of a much more linear symbol table I produced for a different project. The detailed backstory is available in the comments at the top of that file. 

The operation of that program is the same as test_p_trie.c: compile it directly and enter the term to be searched for on the command line. Additional details available in the comments of that program.
